using HackerKit.Models;
using HackerKit.Views;
using HackerKit.Services;
using Newtonsoft.Json;

/*测试解码*/
Console.WriteLine("\r\n------------------");
Console.WriteLine("测试解码");
Console.WriteLine("------------------");
var decode_hexStr = "1214E59BBEE59BBEE598BFE7A781F09F949E2E7A69703A8A011287013A1C7B22686569676874223A313032342C227769647468223A313032347D422033443744424538374138323637443039443745333745363631323837384244462214E59BBEE59BBEE598BFE7A781F09F949E2E7A6970280018D2EFCACCAA030866122439383032356238352D373737612D343631312D393039352D38643464323332636131386208061A053142797465";
var decode_hexStr_head = "2AAF0808181001100010AC0110081006101010E50110011010109B011001101010BE011001101010E50110011010109B011001101010BE011001101010E501100110101098011001101010BF011001101010E7011001101010A701100110101081011001101010F00110011010109F011001101010940110011010109E0110011010102E1010107A1010106910101070101A100510311042107910741065103A10AC011001101210A9011001100810661012102410391038103010321035106210381035102D1037103710371061102D1034103610311031102D1039103010391035102D103810641034106410321033103210631061103110381062101810D20110EF0110CA0110CC0110AA011003102010E50110011020109B011001102010BE011001102010E50110011020109B011001102010BE011001102010E501100110201098011001102010BF011001102010E7011001102010A701100110201081011001102010F00110011020109F011001102010940110011020109E0110011020102E1020107A102010691020107010281000103A101C107B10221068106510691067106810741022103A1031103010321034102C1022107710691064107410681022103A1031103010321034107D10421020103310441037104410421045103810371041103810321036103710441030103910441037104510331037104510361036103110321038103710381042104410461A9C040A0CE69EABE58FB6E598BFE5A3B31001100010AC0110081006101010E50110011010109B011001101010BE011001101010E50110011010109B011001101010BE011001101010E501100110101098011001101010BF011001101010E7011001101010A701100110101081011001101010F00110011010109F011001101010940110011010109E0110011010102E1010107A1010106910101070101A100510311042107910741065103A10AC011001101210A9011001100810661012102410391038103010321035106210381035102D1037103710371061102D1034103610311031102D1039103010391035102D103810641034106410321033103210631061103110381062101810D20110EF0110CA0110CC0110AA011003102010E50110011020109B011001102010BE011001102010E50110011020109B011001102010BE011001102010E501100110201098011001102010BF011001102010E7011001102010A701100110201081011001102010F00110011020109F011001102010940110011020109E0110011020102E1020107A102010691020107010281000103A101C107B10221068106510691067106810741022103A1031103010321034102C1022107710691064107410681022103A1031103010321034107D1042102010331044103710441042104510381037104110381032103610371044103010391044103710451033103710451036103610311032103810371038104210441046";
var decode_bytes = BytesService.ParseHexWithSpaces(decode_hexStr);
var decode_bytes_head = BytesService.ParseHexWithSpaces(decode_hexStr_head);
var decode_proto = ProtobufService.Decode(decode_bytes);
var decode_json = decode_proto?.ToJson(true);
var decode_proto_head = ProtobufService.TryParseWithHead(decode_bytes_head);
var decode_json_head = decode_proto_head?.pbJson;
var decode_proto_head_all = ProtobufService.DeepParseHexProtos(decode_proto_head);
var decode_json_head_all = decode_proto_head_all?.ToJson(true);

Console.WriteLine($"【解码后未暴力穷举的json】：{decode_json}-------head：{BytesService.BytesToHex(decode_proto.Head)}\n");
Console.WriteLine($"【解码带head的proto】：{decode_json_head}\n");
Console.WriteLine($"【完全展开解码带head的proto】：{decode_json_head_all}\n");

/*测试编码*/
Console.WriteLine("\r\n------------------");
Console.WriteLine("测试编码");
Console.WriteLine("------------------");

var encode_protoStr = "{\r\n  \"5\": {\r\n    \"1\": 24,\r\n    \"2\": \"hex->0100AC1214E59BBEE59BBEE598BFE7A781F09F949E2E7A69703A8A011287013A1C7B22686569676874223A313032342C227769647468223A313032347D422033443744424538374138323637443039443745333745363631323837384244462214E59BBEE59BBEE598BFE7A781F09F949E2E7A6970280018D2EFCACCAA030866122439383032356238352D373737612D343631312D393039352D38643464323332636131386208061A053142797465\",\r\n    \"3\": {\r\n      \"1\": \"枫叶嘿壳\",\r\n      \"2\": \"hex->0100AC1214E59BBEE59BBEE598BFE7A781F09F949E2E7A69703A8A011287013A1C7B22686569676874223A313032342C227769647468223A313032347D422033443744424538374138323637443039443745333745363631323837384244462214E59BBEE59BBEE598BFE7A781F09F949E2E7A6970280018D2EFCACCAA030866122439383032356238352D373737612D343631312D393039352D38643464323332636131386208061A053142797465\"\r\n    }\r\n  }\r\n}";
var encode_proto = ProtobufService.FromJson(encode_protoStr);
var encode_hex = encode_proto.ToHex();

Console.WriteLine($"【编码后的Protocal Buffer】：{encode_hex}\n");

var parameters = new Dictionary<string, object>
{
	["f4"] = "Ad钙嘿壳",
	//["f7"] = "{\"info\": \"info\"}",
	//["f1"] = 10,
	//["subproto2F1"] = 200,
	//["f2"] = Guid.NewGuid().ToString(),
	//["f8"] = "MD5哈希字符串",
	//["f3"] = "大整数字符串"
};
var fakeFileObj = FakeFileService.MakeFakeFileJson(parameters);

var fakeFileJson = JsonConvert.SerializeObject(fakeFileObj, Formatting.Indented);
Console.WriteLine($"fakefile：{fakeFileJson}\n");

Console.ReadLine();
