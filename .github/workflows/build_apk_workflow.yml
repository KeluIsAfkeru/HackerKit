name: Build HackerKit APK

on:
  push:
    branches:
      - main

jobs:
  build:
    if: contains(github.event.head_commit.message, 'build:')
    runs-on: windows-latest
    permissions:
      contents: write

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Java 11
        uses: actions/setup-java@v3
        with:
          java-version: "11"
          distribution: "zulu"

      - name: Cache NuGet packages
        uses: actions/cache@v3
        with:
          path: |
            ~/.nuget/packages
            $(UserProfile)/.nuget/packages
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }}
          restore-keys: |
            ${{ runner.os }}-nuget-

      - name: Restore dependencies
        run: nuget restore HackerKit.sln

      - name: Find MSBuild Path
        id: msbuild
        shell: pwsh
        run: |
          # 获取最新的MSBuild路径并验证
          $msbuildPath = vswhere -latest -products * -requires Microsoft.Component.MSBuild -find MSBuild\**\Bin\MSBuild.exe | Select-Object -First 1
          if (-not (Test-Path $msbuildPath)) {
              Write-Error "❌ MSBuild not found at $msbuildPath"
              exit 1
          }
          echo "MSBUILD_PATH=$msbuildPath" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          echo "✅ Found MSBuild at: $msbuildPath"

      - name: Calculate Version
        id: version
        shell: pwsh
        run: |
          # 改进的版本号计算逻辑
          $latestTag = git describe --tags --abbrev=0 --match "v*" 2>$null
          $currentCommit = git rev-parse HEAD
          
          if (-not $latestTag) {
              Write-Host "ℹ️ No existing tag found. Starting from v0.0.0"
              $newVersion = "0.0.1"
          } else {
              $currentVersion = $latestTag.TrimStart('v')
              if ($currentVersion -notmatch '^(\d+)\.(\d+)\.(\d+)$') {
                  Write-Error "❌ Invalid version format: $currentVersion"
                  exit 1
              }
              $major = [int]$matches[1]
              $minor = [int]$matches[2]
              $patch = [int]$matches[3] + 1
              $newVersion = "$major.$minor.$patch"
          }

          echo "NEW_VERSION=$newVersion" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          echo "✅ Version calculated: $newVersion"

      - name: Build APKs
        shell: pwsh
        timeout-minutes: 30
        strategy:
          matrix:
            platform: [arm64, amd64, arm32, amd32]
        run: |
          $projectPath = "HackerKit.Android/HackerKit.Android.csproj"
          $outputDir = "HackerKit.Android/bin/Release/${{ matrix.platform }}"
          
          # 清理旧构建结果
          if (Test-Path $outputDir) {
              Remove-Item $outputDir -Recurse -Force
          }

          & "$env:MSBUILD_PATH" $projectPath `
            /t:SignAndroidPackage `
            /p:Configuration=Release `
            /p:Platform="${{ matrix.platform }}" `
            /p:Version=$env:NEW_VERSION `
            /p:OutputPath=$outputDir

          # 验证APK生成
          if (-not (Test-Path "$outputDir/*.apk")) {
              Write-Error "❌ APK generation failed for ${{ matrix.platform }}"
              exit 1
          }

      - name: Collect Build Artifacts
        shell: pwsh
        run: |
          # 创建统一输出目录
          $artifactDir = "artifacts/${{ env.NEW_VERSION }}"
          New-Item -ItemType Directory -Path $artifactDir -Force
          Copy-Item HackerKit.Android/bin/Release/*/*.apk -Destination $artifactDir
          echo "ARTIFACT_DIR=$artifactDir" >> $env:GITHUB_ENV

      - name: Generate Release Notes
        id: release_notes
        shell: pwsh
        run: |
          $latestTag = git describe --tags --abbrev=0 --match "v*" 2>$null
          $currentCommit = git rev-parse HEAD
          
          if (-not $latestTag) {
              $commitHistory = git log --pretty=format:"• %h - %s (%an)"
          } else {
              $commitHistory = git log "${latestTag}..$currentCommit" --pretty=format:"• %h - %s (%an)"
          }
          
          $releaseNotes = @"
          ## 🚀 What's New in v${{ env.NEW_VERSION }}
          
          ### 📜 Commit History
          $commitHistory
          
          ### 📦 Included Builds
          - arm64
          - arm32
          - amd64
          - amd32
          "@
          
          echo $releaseNotes
          echo "RELEASE_NOTES=$releaseNotes" >> $env:GITHUB_ENV

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ env.NEW_VERSION }}
          name: "HackerKit v${{ env.NEW_VERSION }}"
          body: ${{ env.RELEASE_NOTES }}
          files: ${{ env.ARTIFACT_DIR }}/*.apk
          draft: false
          prerelease: false
