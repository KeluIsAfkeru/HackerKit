name: Build HackerKit APK

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build-and-release:
    if: contains(github.event.head_commit.message, 'build:')
    runs-on: windows-latest
    permissions:
      contents: write
      actions: write
      packages: write

    steps:
      - name: Checkout with Full History
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      # Java环境配置
      - name: Setup Java 11
        uses: actions/setup-java@v3
        with:
          java-version: "11"
          distribution: "microsoft"

      # 缓存优化
      - name: Cache NuGet packages
        uses: actions/cache@v3
        with:
          path: |
            ~/.nuget/packages
            HackerKit.Android/obj/
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }}
          restore-keys: |
            ${{ runner.os }}-nuget-

      # MSBuild路径探测
      - name: Find MSBuild Path
        id: msbuild
        shell: pwsh
        run: |
          $msbuildPath = vswhere -latest -products * -requires Microsoft.Component.MSBuild -find MSBuild\**\Bin\MSBuild.exe
          echo "MSBUILD_PATH=$msbuildPath" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append

      # 版本号生成逻辑
      - name: Generate New Version
        id: version
        shell: pwsh
        run: |
          $latestTag = git describe --tags --abbrev=0 --match "v*" 2>$null || echo "v0.0.0"
          $currentVersion = $latestTag.TrimStart('v')
          
          # 语义化版本自动递增
          $versionParts = $currentVersion.Split('.')
          [int]$major = $versionParts[0]
          [int]$minor = $versionParts[1]
          [int]$patch = $versionParts[2] + 1
          
          $newVersion = "$major.$minor.$patch"
          echo "NEW_VERSION=$newVersion" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          echo "##[set-output name=version;]$(echo $newVersion)"

      # 标签创建与推送
      - name: Create and Push Tag
        shell: pwsh
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          
          # 强制更新标签（允许版本回退）
          git tag -af "v${{ env.NEW_VERSION }}" -m "Release v${{ env.NEW_VERSION }}" ${{ github.sha }}
          git push origin "v${{ env.NEW_VERSION }}" --force
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # 并行构建所有架构
      - name: Build All Architectures
        shell: pwsh
        run: |
          $platforms = @('arm64', 'x64', 'arm', 'x86')
          foreach ($platform in $platforms) {
              Write-Output "Building $platform..."
              & "${env:MSBUILD_PATH}" HackerKit.Android/HackerKit.Android.csproj `
                /t:SignAndroidPackage `
                /p:Configuration=Release `
                /p:Platform=$platform `
                /p:Version=${{ env.NEW_VERSION }} `
                /p:OutputPath="bin/Release/$platform-v${{ env.NEW_VERSION }}"
          }

      # Release创建与文件上传
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ env.NEW_VERSION }}
          name: "HackerKit v${{ env.NEW_VERSION }}"
          body: |
            ### 更新内容
            - 自动构建版本 ${{ env.NEW_VERSION }}
            - 包含以下架构支持：
              * ARM64
              * x64
              * ARMv7
              * x86
          files: |
            HackerKit.Android/bin/Release/arm64-v${{ env.NEW_VERSION }}/HackerKit.Android.apk
            HackerKit.Android/bin/Release/x64-v${{ env.NEW_VERSION }}/HackerKit.Android.apk
            HackerKit.Android/bin/Release/arm-v${{ env.NEW_VERSION }}/HackerKit.Android.apk
            HackerKit.Android/bin/Release/x86-v${{ env.NEW_VERSION }}/HackerKit.Android.apk
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
